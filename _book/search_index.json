[["index.html", "An illustrated introduction to R Chapter 1 Introduction", " An illustrated introduction to R Hari Subhash 2021-05-30 Chapter 1 Introduction Test This page currently holds my best practices and thoughts about while writing this book. This page eventually will be similar to other pages such as Advanced R. Rendering The current rendering style is pretty basic. However, once the book is completed, I will swith to a style similer to Advanced R. The output.yml from the advanced R book or try the Advanced R solutions. Writing process My current writing process with an emphasis on adding citations. Write using markdown first. Note in plain text the citations. Capture all citations in zotero Once the first draft of a chapter is complete, switch to the visual editor and use the (‚Äú6 Functions | Advanced r,‚Äù n.d.) syntax to add all the citations. JK This book will introduce R‚Ä¶ Pre-requisites This book is meant for those with no familiarity with R. You don‚Äôt need to know how to code have any familiarity with programming in general. The only pre-requisites are: Some familiarity with computers for basic tasks like installing new software. Commitment towards trying things on your own (even when it gets hard). I want to stress the second point. This will book will try to make things really easy and intuitive. But there will be times when you encounter an error or issue that is not covered here. You should reach out on the community discord channel or References "],["setup.html", "Chapter 2 Setup R and RStudio 2.1 Install R 2.2 Install RStudio 2.3 Run commands in the console 2.4 Dealing with errors 2.5 Saving code 2.6 Executing a script 2.7 RStudio look and feel", " Chapter 2 Setup R and RStudio In this chapter, we will install R and RStudio and get familiar with executing some code. 2.1 Install R Our very first step is to download and install R. The sequence below is current as of August 2021. CRAN, which is an open repository for R content, hosts installation files for R across different servers located around the world. I am based out of the US so I will pick one from here but you could use any of the options here to download R. On the next screen, pick the version that corresponds to your operating system and install it on your machine. Once R is installed on your computer, your machine would be able to understand and execute any code that you write in R. 2.2 Install RStudio R comes with a basic editor for writing code. But we won‚Äôt use it in this book. Instead we will use RStudio. You can think of R Studio as a fully featured editor like Microsoft Word or Google docs, while the basic editor that ships with R is like the notepad or any other basic text editor. The community version of RStudio is free and packed with features that make our lives easier. You can download RStudio from the following link. Once you have R Studio installed, open it up to write your first few lines of code. 2.3 Run commands in the console Let‚Äôs print(‚Äúhello world‚Äù) as our first command. print(&quot;Hello World!&quot;) The right angle bracket with blinking cursor shows the place where we can enter commands. You should follow along with the next sequence of steps so that you get familiar with typing commands in R. Let‚Äôs try out a few basic arithmetic operations. Enter the arithmetic as shown below one line at a time. 2 + 2 320 * 987 10 &gt; 12 You can think of the R console as a calculator on steroids. Similar to the calculator it allows us to enter commands and it prints the results of those below the command. 2.4 Dealing with errors Computers, unlike humans are extremely finicky and precise about language. While humans can infer meaning from jumbled up words or incomplete sentences; computers will protest and complain even if a period is not where it is supposed to be. This means that at some point we will invariably type in something that yields an error. When that happens R will return an error message like the one shown below that indicates why there was an issue with executing a particular line of code. Errors can be frustrating experience if you are new to coding. You might not immediately be able to tell why an error occurred and the error message from R can often seem very cryptic. Errors, however, are a part and parcel of programming. And a big component of your journey as a new programmer will be to learn how to understand and resolve them. The first and often best strategy is to copy paste the error message and search on google to see if others have resolved the same error with someone else. Initially even these solutions like those on forums like stackoverflow might seem hard to decipher and understand. But, eventually you will get to a point where you are not as flustered when you encounter them and have enough knowledge, tools and strategies in your arsenal to troubleshoot effectively. You might even come to enjoy the puzzle solving learning experience that an odd error brings üòÑ. I will deliberately introduce several errors as we go through this book to get us familiarized with them and teach you how to go about resolving them. 2.5 Saving code So far, we have typed commands into the console. But you will notice that there is no option to save the code that we have typed into the console. Most projects would require files that can be saved so that we can work on them over a period of time and execute them a multiple times without having to type them out each time. We can do this by placing code inside a file. There are many different types of files but, for now let‚Äôs start with a simple R script. Now we need to get all the commands that we tried out earlier into this script. One option would be retype all the commands but that is an extremely tedious way of doing this. Instead, we can access all the previously executed code using the history tab as shown below and copy it over to the source file. We don‚Äôt need the line that generated the error, so let‚Äôs remove that and save the file. I am calling it my_first_script. But you can call it anything you want. The files tab in RStudio shows all your files and folders. Navigate to the folder you saved the script in to check if it is actually there. 2.6 Executing a script Once you have saved your file, you can run it as many times you would like without having to retype any of the commands. There are two ways you can do this. The first is by stepping through the script one line at a time using the run button. The second is by running the full script by sourcing the file. You can do this by clicking on the source button. Notice that the source command generates a new line in the history tab. This is the command that is used to source a file. Now we can close the script and paste this command from the history tab using the To console button and run it to execute all of the code within that script as shown below. Also notice how I use the broom üßπ icon to clear the code in the console before sourcing the script. 2.7 RStudio look and feel RStudio comes with tons of options to customize how it looks and feels. You can customize the different tabs, choose a different font, apply a darker theme etc. I personally like a dark theme, so I am going to switch over to that for the rest of this book. "],["notebooks.html", "Chapter 3 Notebooks 3.1 The anatomy of a notebook 3.2 The basics", " Chapter 3 Notebooks In the last chapter we wrote some code and saved it in an R Script file. Scripts are great for saving code that you would like to execute multiple number of times. They make it much easier to write and maintain code. But they have a limitation - they are not suited for interactively exploring data. A significant portion of data science projects are spent exploring and making sense of the data. This can often require weaving text together with the code and its output. You would also want to share your work with your colleagues and being able to think out aloud in your documents while also presenting the code and its outputs makes your work easy to understand and replicate. Scripts don‚Äôt allow us to do this effectively but notebooks do. ‚ÄúAn R Notebook is an R Markdown document with code chunks that can be executed independently and interactively, with output visible immediately beneath the input‚Äù (Yihui Xie 2019). This chapter will explore the basic features of notebooks and how to use them. 3.1 The anatomy of a notebook RStudio might ask you to install a few packages if this is the first time you are doing this. Go ahead and click yes. As mentioned earlier, R notebooks are a type of R markdown document. This book for instance, is also written in R markdown and is a type of R markdown document. An R markdown document is composed of the following components. YAML: At the top, we have a YAML header. YAML stands for Yet Another Markup Language. YAML is used to set the metadata for a R markdown document. For instance, here it sets the title of the notebook and specifies that the output format is an html_notebook. The YAML portion of the document is identified by the three --- at the top and bottom. You will not have to worry about YAML much in the beginning since RStudio conveniently pre-populates it when you open a new R markdown document. However, as you get along on your R journey, you will learn how to use this header section to customize the look and feel of your documents. Markdown: The next piece of an R markdown document is markdown. Markdown is a text markup language. Markup is simply annotations next to text that instruct the editor to render the text a particular way. For instance, ## next to some text would indicate that the particular line of text should be rendered as a type 2 heading. This is similar to what you would do in a word processor where you would use the drop down to select a particular heading type. The only difference being that in an editor like MS Word the changes are instantaneously visible to the person who is writing, while with markdown you will only be able to see the changes when you render. Code: You can insert new chunks of code into your notebooks using Ctrl + Alt + I or CMD + Opt + I in Mac. Whilw we will be primarily using R code, you could insert chunks of code in other languages like Python, C++, SQL also. 3.2 The basics Give the document a name, hit save and preview it. The preview immediately launches the notebook in a different window showing the text along with the code. Also notice, how the file section in R Studio now has two files. One that has the extension .Rmd indicating an R markdown file and another with the extension .nb.html indicating an HTML notebook, which is the output format that is in the YAML header. Under the hood when you ‚Äòknit‚Äô an Rmarkdown notebook it is handed off to the package knitr (Xie 2020) , which executes all the code chunks and spins up an intermediate markdown document. This document is then sent to a open source converter called pandoc that converts the markdown document to the format that is set in the YAML header. (Hadley Wickham 2017) The preview updates whenever we make any changes to the notebook and save it. Let‚Äôs see it in action. We can run a chunk of code by pressing the play button. This chunk of code generates a plot that is rendered below it. When we save the document and go back to the preview you will notice that it is automatically updated. Let‚Äôs update some markdown text as well to see how that renders. I am going to create a type one header. The number of # indicate the level of a header in markdown. Once saved the preview will now show the title styled as type one heading. Let‚Äôs add some more text for fun. If you click on the preview dropdown, you will also notice all these other output formats that you could knit into. Try out the pdf option. Keep this cheatsheet as you use this book. References "],["introduction-to-functions.html", "Chapter 4 Introduction to Functions", " Chapter 4 Introduction to Functions Functions are an extremely powerful tool for programming. My goal with this chapter is not to get you to write functions but to help you understand their purpose and to recognize them when you use them. For now, we will work with functions that have been written by others until we learn to write functions of our own. Let‚Äôs explore why functions are useful and how to go about building them by teaching a computer to make tea. Now, asking your computer to make tea is very different from say asking a friend of yours to make you tea. Your friend doesn‚Äôt need step by step instructions to make tea. In fact tin your friend would probably think that you were crazy if you told them something like ‚Äúput the kettle on the stove and wait for the water to come to a boil and then open the cupboard to get a cup.‚Äù But a computer on the other hand needs every specific and precise step by step instructions to make tea. So let‚Äôs look at two ways to provide this instruction. One without functions and another using functions. Let‚Äôs start by turning on our computer and asking it to boil some water for the tea. First you need to get the kettle from your cupboard.This would involve going to the cupboard, opening it, and then pulling out the kettle from the cupboard and then closing the cupboard. Next you will need to fill water in the kettle for a cup of tea. This involves going to the tap and filling enough water for a cup. Next let‚Äôs give instruction to boil this water. Place kettle on stove. "],["applications.html", "Chapter 5 Applications 5.1 Example one 5.2 Example two", " Chapter 5 Applications Some significant applications are demonstrated in this chapter. 5.1 Example one 5.2 Example two "],["final-words.html", "Chapter 6 Final Words", " Chapter 6 Final Words We have finished a nice book. "],["references.html", "References", " References "]]
