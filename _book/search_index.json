[["index.html", "An illustrated introduction to R Chapter 1 Introduction 1.1 Pre-requisites", " An illustrated introduction to R Hari Subhash 2021-08-02 Chapter 1 Introduction This book is a work in progress. When complete, it is meant to be a gentle illustrated introduction to R This book will introduce R‚Ä¶ 1.1 Pre-requisites This book is meant for those with no familiarity with R. You don‚Äôt need to know how to code have any familiarity with programming in general. The only pre-requisites are: Some familiarity with computers for basic tasks like installing new software. Commitment towards trying things on your own (even when it gets hard). "],["setup.html", "Chapter 2 Get setup 2.1 Install R 2.2 Drive a Ferarri 2.3 Meet the console - a glorified calculator 2.4 Dealing with errors 2.5 Saving code 2.6 Executing a script 2.7 RStudio look and feel 2.8 The magical world of notebooks 2.9 Exercise", " Chapter 2 Get setup In this chapter, we will install R and RStudio and get familiar with executing some code. 2.1 Install R Our very first step is to download and install R from CRAN - a repository for R. Download and install the version of R that corresponds to your operating system. You can think of R as an interpreter between you and your computer. Once R is installed, you can write instructions using the R programming language, which are then translated by R into a language that your computer will understand. In the real world, using an interpreter is only possible if you speak a language that they understand. The same goes here. Our job as programmers is to write R programs that communicate clearly and without error so that these instructions can be translated effectively and relayed to the computer. In the next step we will install RStudio which is a tool that makes this task easy. 2.2 Drive a Ferarri In theory, you could use any text editor (like Notepad or MS Word) to write R programs. But this would be like using a kitchen knife to perform a surgery. It might get the job done, but it won‚Äôt be easy or pretty. When you install R on your system, it also installs a code editor that can be used to write R programs. While this is a more appropriate tool than a text editor it is a bit basic. What we need is a Ferrari - a feature rich code editor that is built to write and manage R programs. This is what RStudio offers. RStudio is free and packed with features that make writing code in R a breeze. It also comes with a lot of other convenient features that make it really easy to manage R projects and publish your work. You can download RStudio from the following link. Once you have R Studio installed, open it up to write your first few lines of code. 2.3 Meet the console - a glorified calculator Let‚Äôs print(‚Äúhello world‚Äù) as our first command. print(&quot;Hello World!&quot;) The right angle bracket &gt; with blinking cursor shows the place where we can enter commands. You should follow along with the next sequence of steps so that you get familiar with typing commands in R. Let‚Äôs try out a few basic arithmetic operations. Enter the arithmetic as shown below one line at a time. 2 + 2 320 * 987 10 &gt; 12 The pane in RStudio that we are currently using is called the console. You can think of the R console as a calculator on steroids. Similar to the calculator it allows us to enter commands and it prints the results of those below the command. 2.4 Dealing with errors Computers, unlike humans are finicky and precise about language. We can infer meaning from jumbld up wrds or incomplete senteces; while a computer will protest and complain even if a period is not where it is supposed to be. Think about them as an interpreter who will refuse to translate what you said if you did not use the correct grammar. This means that at some point we will invariably type in something that yields an error. When that happens R will return an error message like the one shown below that indicates why there was an issue with executing a particular line of code. Errors can be frustrating if you are new to coding. They are often cryptic and you might not be able to resolve them immediately. But that is OK. Errors, are a part and parcel of programming. And resolving them is a key programming skill. So when you get an error, take a deep breath and remember that this is an opportunity to learn something new. Often the best strategy to find a solution is to search for the error online to see if others have resolved it with someone else‚Äôs help. Initially even these solutions will seem like incoherent technobabble. And right now, you might simply copy paste these solutions and move on, but, with practice and patience you will learn to troubleshoot effectively and learn from these errors. And hey, you might even come to enjoy the puzzle solving experience that an odd error brings. :smile: 2.5 Saving code So far, we have typed commands into the console. But you will notice that there is no option to save the code that we have typed into the console. Most projects would require files that can be saved so that we can work on them over a period of time and execute them a multiple times without having to type them out each time. We can do this by placing code inside a file. There are many different types of files but, for now let‚Äôs start with a simple R script. Now we need to get all the commands that we tried out earlier into this script. One option would be retype all the commands but that is an extremely tedious way of doing this. Instead, we can access all the previously executed code using the history tab as shown below and copy it over to the source file. We don‚Äôt need the line that generated the error, so let‚Äôs remove that and save the file. I am calling it my_first_script. But you can call it anything you want. The files tab in RStudio shows all your files and folders. Navigate to the folder you saved the script in to check if it is actually there. 2.6 Executing a script Once you have saved your file, you can run it as many times you would like without having to retype any of the commands. There are two ways you can do this. The first is by stepping through the script one line at a time using the run button. The second is by running the full script by sourcing the file. Click on the dropdown instead of the button itself. You have two options - source with echo or the default source (you can ignore the third option for now). Echo, simply means to print outputs on to the console. The default option of Source will run all the lines of the code without printing anything to the console. Use the Source with echo option for this exercise. Notice that the source command generates a new line in the history tab. This is the command that is used to source a file. Now we can close the script and paste this command from the history tab using the To console button and run it to execute all of the code within that script as shown below. Also notice how I use the broom üßπ icon to clear the code in the console before sourcing the script. 2.7 RStudio look and feel RStudio comes with tons of options to customize how it looks and feels. You can customize the different tabs, choose a different font, apply a darker theme etc. I personally like a dark theme, so I am going to switch over to that for the rest of this book. Play around with the options here to find a look that you like. 2.8 The magical world of notebooks Scripts make it easier to write and maintain code and are great for storing code that you would like to execute multiple times. But they have a limitation - they are not suited for interactively exploring data. A significant portion of data science projects are spent exploring and making sense of the data. This can often require weaving text together with the code and its output. You would also want to share your work with your colleagues and being able to think out aloud in your documents while also presenting the code and its outputs makes your work easy to understand and replicate. Scripts don‚Äôt allow us to do this effectively but notebooks do. R notebooks are built using R markdown. R markdown is an extremely versatile format that can be used to create all kinds of outputs like books, websites, presentations, word documents etc. This book is written using R markdown. Let‚Äôs create a notebook using the same drop down menu as that for script. The notebook opens with some dummy text that is a good template to get started. 2.8.1 Anatomy of an R markdown document An R markdown document is typically composed of the following components. YAML: At the top, we have a YAML (Yet Another Markup Language) header that is identified by the three --- at the top and bottom. YAML is used to set the metadata for a R markdown document. For instance, in the document we just opened it sets the title of the notebook and specifies that the output format is an html_notebook. There are several other options that can be specified in the header that will determine the output format (pdf, word, book, presentation etc), the design, date of publishing etc. But for now let‚Äôs keep things simple and leave everything as is. Markdown: Markdown is a text markup language. Markup is simply annotations next to text that instruct the editor to render the text a particular way. For instance, ## next to some text would indicate that the particular line of text should be rendered as a type 2 heading. This is similar to what you would do in a word processor where you would use the drop down to select a particular heading type. The only difference being that in an editor like MS Word the changes are instantaneously visible to the person who is writing, while with markdown you will only be able to see the changes when you ‚Äòknit‚Äô the document. We will see how to do that shortly. Code: You can insert new chunks of code into your notebooks using Ctrl + Alt + I or CMD + Opt + I in Mac. While we will be primarily using R code, you could insert chunks of code in other languages like Python, C++, SQL also. 2.8.2 Working with a notebook We will do most of the exercises and work for this book using notebooks. So let‚Äôs get comfortable with the basic workflow for using the. Let‚Äôs start by saving the notebook and previewing it as shown below. You can give the notebook any name you would like. The preview immediately launches the notebook in a different window showing the text along with the code. Next, in the files tab, navigate to the folder where you saved the notebook. Notice, how the file section in R Studio has two files. One that has the extension .Rmd indicating an R markdown file and another with the extension .nb.html indicating an HTML notebook, which is the output format that is in the YAML header. This file was created when you ‚Äòknit‚Äô the R markdown notebook. Knit and preview are the same for our purposes right now. Try opening this file on your computer and see how it looks. The contents of this notebook are similar to webpages and can be shared with colleagues either as standalone files or as a hosted standalone webpage (we will explore how in a later section). The preview updates whenever we make any changes to the notebook and save it. Let‚Äôs see it in action. We can run a chunk of code by pressing the play button. This chunk of code generates a plot that is rendered below it. When we save the document and go back to the preview you will notice that it is automatically updated to include this plot. Let‚Äôs update some markdown text as well to see how that renders. I am going to create a type one header. The number of # indicate the level of a header in markdown. Once saved the preview will now show the title styled as type one heading. Let‚Äôs add some more text. If you click on the preview dropdown, you will also notice all these other output formats that you could knit into. Try out the pdf option. Keep this cheatsheet as you use this book. 2.9 Exercise Create a unordered bulleted list instead of an ordered one. "],["r-basics.html", "Chapter 3 R basics 3.1 Variables 3.2 Data types 3.3 Functions 3.4 Packages", " Chapter 3 R basics 3.1 Variables So far we have used R pretty much like a glorified calculator than can perform calculations and print stuff on to the console. The results from these calculations however were not stored anywhere. However, often times we will need to do more complicated things that require us store intermediate results. We can do so using variables. Copy and run the code shown below my_awesome_variable &lt;- &quot;R is amazing&quot; 3.2 Data types Don‚Äôt cover factors? Do we need this here right now? I could potentially cover this much later along with data structures. Character 3.3 Functions In chapter 2 section on saving code we saw how we could save a series of programming commands in a script and then source that script whenever we needed to execute the same sequence. This meant that we did not have to type out the commands again to execute the series of steps, instead, we could simply source the script to run the sequence of steps for us. Functions are a similar concept in programming but with the additional feature of being able to pass certain values as arguments that determine the nature of the output. For instance, consider the following function sum(32, 15). sum is the name of the function and 32 and 15 are the arguments that were passed to the function. If we changed the values of the arguments to some other numbers then the output of the sum function would change accordingly. We‚Äôd similarly used the print function earlier with the argument \"Hello World\". In programming terminology, whenever we use a function in our code it is referred to as being called with its arguments. Here we called the function print with the argument ‚ÄúHello World.‚Äù Functions are an extremely powerful tool for programming and have a lot of different benefits. Well named functions enhance the readability of your code by declaring to the reader what it is that you are doing. When a programmer uses functions like sum or print, the reader clearly understands what they are seeking to achieve. This is in contrast with a series of commands that implement the nitty-gritty details of adding two numbers or printing something to the console, which often are confusing to someone else who is not necessarily familiar with the logic behind the detailed steps. By encapsulating a series of steps in a function, you also reduce the likelihood errors that could occur if you had to copy and paste the same set of commands in different places in your code. Eliminating the need to copy paste commands also makes your code much easier to manage, since if you realize you have to modify a particular command you only have to do it within the function definition, whereas if you did not use a function, you would have to find all the places where that command appears and then change all those instances. 3.4 Packages One of the biggest benefits of using an open source language like R is its robust package ecosystem. A package usually contains code, data and documentation. The code part of a package typically contains a set of functions that we can use in our work. The functions are written and tested by someone else and this means that we don‚Äôt have to go through the work of writing them ourselves. In fact, almost all of your work will be done using Packages contain a collection of such functions that have been written and tested by someone else. 3.4.1 Install the tidyverse package "],["tidy-data.html", "Chapter 4 Tidying Data", " Chapter 4 Tidying Data TBD "],["appendix.html", "Chapter 5 Appendix 5.1 Packages", " Chapter 5 Appendix 5.1 Packages One of the biggest benefits of using an open source language like R is its robust package ecosystem. Now, if the only packages that you know of are the ones that get delivered by your mail person, then stick around. This chapter will cover how to install, use, uninstall and find packages. Let‚Äôs start by understanding what packages are and why they are so great. 5.1.1 What is a package? A package usually contains code, data and documentation. The code part usually contains a set of functions that we can use in our work. In Chapter ??, we discussed how functions allow us to encapsulate a series of operations. This function can then be repeatedly called to execute the same sequence of steps. Packages contain a collection of such functions that have been written and tested by someone else. 5.1.2 Why are packages useful? Packages, can save us a tremendous amount of time and effort when conducting data analysis. Let‚Äôs see how. Imagine you are researching software stocks to invest in. You specifically want to examine past trends in price movement to predict the future. To do this research, you will first need to download historical price data for different stocks from a website or service like Yahoo Finance or Morningstar. Often, the downloaded data has errors, might be incomplete, and in a shape that is not suited for the analysis that you want to perform. So the first task is usually to tidy this data so that it is in a format that you can use. For instance, in the case shown below I transform the data from a wide format with stock names as columns to a long format where the stocks are represented as rows. There is a lot more to tidying data, which we will cover in chapter 4. The actual work that draws meaningful insight from the data often happens in an iterative manner. Very rarely do we find our answers in the first try and it often requires a series of steps that combine visualization, analysis and modeling and further transformations of the data till we can draw conclusions. Once we have some conclusions that we can share, we can communicate these results. In a collaborative setting you would also need to communicate intermediate results with your research partner(s). So in these settings, communication can also be wrapped into the earlier iterative process of making sense of the data. Packages help simplify all of these steps. Most tasks and problems that you encounter in your analysis are likely to have already been resolved in a different setting by someone else. For instance, consider the task of getting data from Yahoo Finance, someone else has probably done this using R before. Packages are a way to bundle these solutions along with some documentation so that you don‚Äôt have to reinvent the wheel when solving the same problems again. For example, in our case, the tidyquant package contains a lot of functions for financial analysis. These can be used to directly download data from Yahoo Finance (or other sources), run popular financial models and visualize them. Similarly, other packages such as tidyr, ggplot, dplyr etc. provide general purpose tools and frameworks that can be applied to any data analysis project. And finally, packages like Rmarkdown and knitr make it really easy to communicate your results in a compelling manner in a wide variety of formats. In a world without packages, you would need to write all the code needed to perform every step of your analysis. This would mean, code to download the stock data, clean it up, custom code to create financial models that you want to use, code for the analysis itself, and generating the charts and tables to include in a report or presentation to communicate the results. The bulk of your intellectual work should be on analyzing whether a stock is a good investment or not i.e.¬†making sense of the data. And packages free up your time by giving you well tested and effective solutions for tasks that are tangential to this purpose so that you can spend all your time on tasks that matter. 5.1.3 Package Repositories Before we install a package, let‚Äôs understand how they are maintained. When someone writes a package, they would need to host somewhere on the internet so that others can access the package to install it. The place that a package is hosted is called a repository. So when we issue a command on our computer to install a particular package, the relevant package is retrieved from this repository and installed on our computer. There are three main sources for r packages. The first and biggest one is the Comprehensive R Archive Network or CRAN. There are about 17500 packages on CRAN right now. The next one is called Bioconductor which specifically provides tools and packages for genomic data and analysis. The final category of packages are hosted independently with the most common choice being github which is a repository for code. Packages that are hosted on CRAN or on BioConductor have requirements about testing and maintenance that ensures the quality of the code. These requirements do not exist for packages that are hosted independently on platforms like GitHub. CRAN and Bioconductor require package developers to maintain their packages and pass certain quality checks. Packages that are not maintained are periodically removed from these repositories. Independently hosted packages such as those on GitHub on the other hand do not have to pass any sort of checks. Package developers often use github to release the most latest versions of their packages on GitHub before moving them to repositories like CRAN. Most of the packages that we will use are hosted on CRAN (unless your work is on Genomics). It is also often the case that packages that are hosted on CRAN are also available on GitHub. These usually tend to be the most recent version of a particular package that has not fully tested but might include newer functions that are not in the previous version that is on CRAN. 5.1.4 Package documentation Our first installation will be the cowsay package. This is a pretty whimsical package that prints a particular animal saying a phrase that you specify. In the code below, I am using the function say() from the cowsay package with the arguments ‚ÄúR can be pretty silly‚Äù and cat. This is printed out as shown below. library(cowsay) say(what = &quot;R can be pretty silly&quot;, by = &quot;cat&quot;) ## ## -------------- ## R can be pretty silly ## -------------- ## \\ ## \\ ## \\ ## |\\___/| ## ==) ^Y^ (== ## \\ ^ / ## )=*=( ## / \\ ## | | ## /| | | |\\ ## \\| | |_|/\\ ## jgs //_// ___/ ## \\_) ## At the very minimum, packages that are published on CRAN must include an online reference that is in the pdf format. In a lot of cases, the package authors also provide additional reference websites and guides. In fact, the another package called pkgdown provides tools and functions that make it really easy to build websites for packages. The cowsay package has a website that is built using pkgdown. You can access it here. Typically, the instructions to install a package are provided in the reference. As you can see, there are two suggested installation methods. The first is the version that is available on CRAN and the second is the newer development version from a repository on GitHub. The package documentation also includes links to external resources. Let‚Äôs go to the page on CRAN for this package. The CRAN page for a package includes all the meta data that is associated with a particular package. This includes links to the documentation, details about the package author(s) and the package references. One thing to note here is the list of dependencies. In most cases, a package depends on other packages to implement its functions. This is a key feature of an open ecosystem of packages. When doing anything in R you will most likely be depending on the work done by others and this holds true for those building packages as well. The dependencies for a particular package are installed along with the package if they don‚Äôt already exist in your system. 5.1.5 Install cowsay package Type in the command below in your console (don‚Äôt forget the quotes) and press Enter. This will install the cowsay package along with its dependencies. install.packages(&quot;cowsay&quot;) The install.packages command is a function that is provided with R. When we provide it with the argument that specifies the name of the package it searches CRAN for this package and then downloads it onto our computer. The packages tab on RStudio shows the list of all the installed packages on your computer. Try searching for the cowsay package after you have installed it to confirm that it worked. Notice how the check box is unchecked. This indicates that the package has not been loaded yet for the current RStudio session. This means that you will not be able to directly use or refer to the functions or other items in this package right now. If we clear the search you will see the entire list of packages. Notice how some of them are already checked. These are the packages that are pre-loaded for every session of R. For instance, we were able to use the print() function earlier since it belongs to the base package that is pre-loaded. We can load a package using the library() function. Copy the command below and run it in your console. library(&quot;cowsay&quot;) Once loaded use the say() function to print any message you like as shown below. By default, the say() function uses a cat as the animal that say‚Äôs the phrase. We can use the by argument in the function to change this to a cow (or any other supported animals). Notice how we used multiple arguments in this function. 5.1.6 Remove a package We can remove a package using the remove.packages() command. remove.packages(&quot;cowsay&quot;) remove.packages() however, will only remove the package that is specified and will not remove any of the dependencies. For instance, the fortunes package that was installed along with cowsay will still be available after removing cowsay. Let‚Äôs reinstall the cowsay package. This time we will use the install button that is available on the packages tab to perform the installation. Notice how the install button simply calls the install.packages() function in the console. 5.1.7 Install a package from GitHub Janitor is a popular package that is used to clean data in excel spreadsheets after it has been loaded into R. Use this link to access its GitHub repo. Not all r packages have an associated GitHub repository. And when they do, the authors typically use GitHub to host versions of a package that are not fully tested or mature yet. Since there are no regulations on what can be hosted on GitHub it is a good idea to pay attention to the stats which are displayed at the top of the repo. The higher these numbers the more likely that the package is of good quality. GitHub is a online platform that offers extensive features for collaboration and version control for software projects. Repositories for R packages are usually open. This means that you can download the code that was used to create the package, submit issues or bugs, and even contribute to the code. Scroll down on the repo page to see instructions for how to install the package. Copy the code that installs the latest version from GitHub. Paste and run this in your RStudio console. This installs the devtools package which contains a function called install_github() that can be used to install packages from GitHub repositories. Notice, how we are again relying on a function from another package (devtools) to install a package. Without this, we would have had to write custom code to download and install a package from GitHub. The janitor package comes with a lot of different functions that make it easy to clean and work with Excel files using R. We will be using these functions in chapter 4. Take a moment to scroll throught the repo page on GitHub to get a feel for them. "]]
